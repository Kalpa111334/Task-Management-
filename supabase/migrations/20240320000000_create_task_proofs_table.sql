-- Create task_proofs table
create table if not exists public.task_proofs (
    id bigint generated by default as identity primary key,
    task_id uuid references public.tasks(id) on delete cascade not null,
    image_url text not null,
    description text,
    submitted_by uuid references auth.users(id) on delete cascade not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Enable RLS
alter table public.task_proofs enable row level security;

-- Drop existing policies if they exist
drop policy if exists "Users can view task proofs they submitted" on public.task_proofs;
drop policy if exists "Admins can view all task proofs" on public.task_proofs;
drop policy if exists "Employees can insert task proofs for their assigned tasks" on public.task_proofs;

-- Create policies
create policy "Users can view task proofs they submitted"
    on public.task_proofs for select
    to authenticated
    using (auth.uid() = submitted_by);

create policy "Admins can view all task proofs"
    on public.task_proofs for select
    to authenticated
    using (
        exists (
            select 1 from public.users
            where users.id = auth.uid()
            and users.role = 'admin'
        )
    );

create policy "Employees can insert task proofs for their assigned tasks"
    on public.task_proofs for insert
    to authenticated
    with check (
        exists (
            select 1 from public.tasks
            where tasks.id = task_id
            and tasks.assigned_to = auth.uid()
        )
    );

-- Create storage bucket for task proofs
insert into storage.buckets (id, name, public) values ('task-proofs', 'task-proofs', true)
ON CONFLICT (id) DO NOTHING;

-- Drop existing storage policies if they exist
drop policy if exists "Anyone can view task proof images" on storage.objects;
drop policy if exists "Authenticated users can upload task proof images" on storage.objects;
drop policy if exists "Authenticated users can delete their uploads" on storage.objects;

-- Storage policies
create policy "Anyone can view task proof images"
    on storage.objects for select
    using ( bucket_id = 'task-proofs' );

create policy "Authenticated users can upload task proof images"
    on storage.objects for insert
    to authenticated
    with check ( bucket_id = 'task-proofs' );

create policy "Authenticated users can delete their uploads"
    on storage.objects for delete
    to authenticated
    using ( bucket_id = 'task-proofs' ); 